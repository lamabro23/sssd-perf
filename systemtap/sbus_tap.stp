global underline = "\033[0;4m"
global normal = "\033[0m"

# global is_in = 0
# global indent = ""

global curr_req_name = ""
global curr_req_type = ""
global curr_target = ""

global send_time = 0
global done_time = 0

global can_stop = 0

global results

global method_counter

%{
    long int ipa_results[1000];
    long int ipa_counter = 0;

    long int samba_results[1000];
    long int samba_counter = 0;

    long int ldap_results[1000];
    long int ldap_counter = 0;

    long int wrong_results[3000];
    long int wrong_counter = 0;
%}

/*
 *  Catch an NSS request with a user name as an argument.
 */
probe nss_getby_name_send {
    if (nss_getby_rawname =~ ".*@(ipa.test|samba.test|ldap.test)") {
        curr_req_name = nss_getby_rawname
        if ($1) {
            printf("---------------------------\n")
            printf("NSS_SEND [%d]: %s\n", pid(), nss_getby_rawname)
        }
    }
}

/*
 *  Catch an ending NSS request.
 */
probe nss_getby_done {
    # stops any other process which goes through nss_getby_done()
    # method from triggering the time
    if (done_time != 0) {

        if ($1) {
            printf("NSS_DONE [%d]: %s\n", pid(), nss_getby_rawname);
            printf("The request took: %d\n", done_time)
        }

        results[nss_getby_rawname] <<< done_time
        add_to_C_array(nss_getby_rawname, done_time)
        done_time = send_time = 0
    }
}

/*
 *  Catch the next step in NSS request's lifetime.
 *  Start the timer for the request time.
 */
probe sss_dp_send {
    if (curr_req_name == opt_name) {
        send_time = gettimeofday_us()
        curr_target = conn_name # this is used later to match the request in sbus_req_call_send
        if ($1) {
            printf("  SSS_SEND [%d]: %s, %s\n", pid(), opt_name, conn_name)
        }
    }

}

/*
 *  Catch the request returning from the data provider.
 *  Stop the timer if sbus_req_call_done matches this request.
 */
probe sss_dp_done {
    # the requst matches the one from sss_dp_send, timer can be stopped
    if (can_stop) {
        can_stop = 0
        done_time = gettimeofday_us() - send_time

        if ($1) {
            printf("  SSS_DONE [%d]: %s\n", pid(), error_message)
        }
    }
}

/*
 *  Catch the fully built request.
 */
probe sbus_req_call_send {
    # ignore other methods triggered by sss_cache,...
    if (sbus_method == "getAccountInfo") {
        if ($1 && send_time != 0) {
            printf("    BUS_SEND [%d]: %s\n", pid(), sbus_method)
        }
    } else {
        # some methods are nested, this counter deals with those
        method_counter += 1
    }
}

/*
 *  Catch the request returning from data provider.
 *  Check if the caught request matches the one from sss_dp_send and mark it.
 */
probe sbus_req_call_done {
    if (method_counter <= 0) {
        if (curr_target == sbus_send) {
            can_stop = 1

            if ($1) {
                printf("    BUS_DONE [%d]: %s - %s\n", pid(), curr_target, sbus_send)
            }
        }
    } else {
        # some methods are nested, this counter deals with those
        method_counter -= 1
    }
}

probe begin {
    if ($1) {
        printf("%sStarting%s...\n", underline, normal)
    }
}

probe end {
    if ($1) {
        printf("\n--------------------------\nThe End...\n")
    }

    foreach (i in results) {
        print_results(i)
    }
}

function print_results(name:string) %{
    int i = 0;
    long int counter = 0;
    long int results[1000];

    if (strstr(STAP_ARG_name, "ipa.test")) {
        STAP_PRINTF("ipa.test,");
        for (i; i < ipa_counter; i++) {
            STAP_PRINTF("%ld", ipa_results[i]);
            if (i != ipa_counter -1)
                STAP_PRINTF(",");
            else
                STAP_PRINTF("\n");
        }

    } else if (strstr(STAP_ARG_name, "samba.test")) {
        STAP_PRINTF("samba.test,");
        for (i; i < samba_counter; i++) {
            STAP_PRINTF("%ld", samba_results[i]);
            if (i != samba_counter -1)
                STAP_PRINTF(",");
            else
                STAP_PRINTF("\n");
        }

    } else if (strstr(STAP_ARG_name, "ldap.test")) {
        STAP_PRINTF("ldap.test,");
        for (i; i < ldap_counter; i++) {
            STAP_PRINTF("%ld", ldap_results[i]);
            if (i != ldap_counter -1)
                STAP_PRINTF(",");
            else
                STAP_PRINTF("\n");
        }

    } else if (strcmp(STAP_ARG_name, "NULL") == 0){
        STAP_PRINTF("unknown_user,");
        for (i; i < wrong_counter; i++) {
            STAP_PRINTF("%ld", wrong_results[i]);
            if (i != wrong_counter -1)
                STAP_PRINTF(",");
            else
                STAP_PRINTF("\n");
        }

    } else {
        STAP_PRINTF("Unknown provider (%s), check your requests...\n", STAP_ARG_name);
    }
%}

function add_to_C_array(name:string, time:long) %{
    if (strstr(STAP_ARG_name, "ipa.test")) {
        ipa_results[ipa_counter++] = STAP_ARG_time;
    } else if (strstr(STAP_ARG_name, "samba.test")) {
        samba_results[samba_counter++] = STAP_ARG_time;
    } else if (strstr(STAP_ARG_name, "ldap.test")) {
        ldap_results[ldap_counter++] = STAP_ARG_time;
    } else if (strcmp(STAP_ARG_name, "NULL") == 0) {
        wrong_results[wrong_counter++] = STAP_ARG_time;
    } else {
        STAP_PRINTF("Unknown provider (%s), check your requests...\n", STAP_ARG_name);
    }
    STAP_RETURN();
%}
